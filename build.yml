---
- name: build application Infrastructure
  hosts: all
  become: true

  vars:
    ruby_version: 3.0.0
    app_user: ubuntu
    app_name: file_uploader_latest
    default_path: /home/ubuntu/file_uploader_latest
    app_path: /home/ubuntu/file_uploader_latest/current
    master_key: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      32353566626139643563386165656463636339396133383839316464316132313863313163323961
      3733333830343337353738616432333139633831643932630a363931343566316139343462353763
      65386665383231656561653661393662396430386666343432653037366561633265373633386537
      3234386661393163340a316264363237363265393561633962346263316339326138373137333432
      63373834323131303633353231343437613261666638303632383835303264346438623363333439
      3637376537326133393139326439663131386661626161336434
    key_base: 6b9aab512927ff24a996da1ed66e7bc06d2a1da21479bc60f14a0942677b73d81430009507d2be4230869cf1b4bb79988cde02397442b326def5491a8c2529b8
    node_version: 14.17.0
    server_name: 18.117.98.112
  tasks:
    - name: Install RVM dependencies and other packages
      apt:
        name:
          - curl
          - gnupg2
          - dirmngr
          - bzip2
          - g++
          - gcc
          - autoconf
          - automake
          - bison
          - libc6-dev
          - libffi-dev
          - libgdbm-dev
          - libncurses5-dev
          - libsqlite3-dev
          - libtool
          - libyaml-dev
          - make
          - pkg-config
          - sqlite3
          - zlib1g-dev
          - libgmp-dev
          - libreadline-dev
          - libssl-dev
          - git
          - nginx
        state: present
        update_cache: yes #to handle the issue with package obsolete

    - name: Install RVM key
      become_user: "{{app_user}}"
      shell: "gpg --keyserver keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB"
      register: rvm_key_output
      changed_when: "'public key created' in rvm_key_output.stdout"

    - name: Install RVM
      become_user: "{{app_user}}"
      shell: "curl --insecure -sSL https://get.rvm.io | bash -s stable"

    - name: confirm the RVM version installed
      become_user: "{{app_user}}"
      shell: "source /home/{{app_user}}/.rvm/scripts/rvm && rvm -v"
      register: rvm_status
      args:
        executable: /bin/bash
    - debug:
        msg: "RVM version installed: {{rvm_status.stdout}}"

    - name: Install Ruby
      become_user: "{{app_user}}"
      shell: "source /home/{{app_user}}/.rvm/scripts/rvm && rvm install {{ruby_version}} "
      args:
        executable: /bin/bash

    - name: default ruby
      become_user: "{{app_user}}"
      shell: "source /home/{{app_user}}/.rvm/scripts/rvm && rvm --default use {{ruby_version}} "
      args:
        executable: /bin/bash

    - name: Clone Git repository
      git:
        repo: https://github.com/anoobbava/{{app_name}}.git
        dest: "{{app_path}}"
        version: master
        clone: yes
        depth: 1
        force: yes
      become_user: "{{ app_user }}"

    - name: Install Gems using Bundler
      become_user: "{{ app_user }}"
      shell: "source /home/{{app_user}}/.rvm/scripts/rvm && gem install bundler"
      args:
        executable: /bin/bash
        chdir: "{{app_path}}"

    - name: Copy the master.key to config path from Ansible Vault
      copy:
        dest: "{{app_path}}/config/master.key"
        content: "{{master_key}}"

    - name: bundle install Gems
      become_user: "{{ app_user }}"
      shell: "source /home/{{app_user}}/.rvm/scripts/rvm && RAILS_ENV=production bundle install"
      args:
        executable: /bin/bash
        chdir: "{{app_path}}"

    - name: create and migrate database and seed the data
      become_user: "{{ app_user }}"
      shell: |
        source /home/{{app_user}}/.rvm/scripts/rvm && bin/rails db:setup RAILS_ENV=production
      args:
        executable: /bin/bash
        chdir: "{{app_path}}"

    - name: Install NVM # install the latest version of NVM
      become_user: "{{app_user}}"
      shell: "curl -sSL https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash"

    - name: Install Node
      become_user: "{{app_user}}"
      shell: "source /home/{{app_user}}/.nvm/nvm.sh && nvm install {{node_version}}"
      args:
        executable: /bin/bash

    - name: Node version
      become_user: "{{app_user}}"
      shell: "source /home/{{app_user}}/.nvm/nvm.sh && node -v"
      register: nvm_status
      args:
        executable: /bin/bash
    - debug:
        msg: "Node Version: {{nvm_status.stdout}}"

    - name: Install yarn
      shell: "source /home/{{app_user}}/.nvm/nvm.sh && npm install --global yarn"
      args:
        executable: /bin/bash
        chdir: "{{app_path}}"

    - name: debug yarn version
      shell: " source /home/{{app_user}}/.nvm/nvm.sh && yarn --version"
      register: output
      args:
        executable: /bin/bash
    - debug:
        msg: "Yarn version: {{output.stdout}}"

    - name: precompile assets
      shell: " source /home/ubuntu/.nvm/nvm.sh && source /home/{{app_user}}/.rvm/scripts/rvm && bundle exec rake assets:precompile RAILS_ENV=production"
      args:
        executable: /bin/bash
        chdir: "{{app_path}}"

    - name: create shared folder for unicorn
      file:
        path: "{{item}}"
        state: directory
        owner: "{{app_user}}"
        group: "{{app_user}}"
      loop:
        - "{{default_path}}/shared"
        - "{{default_path}}/shared/pids"
        - "{{default_path}}/shared/sockets"
        - "{{default_path}}/shared/logs"

    - name: Start Unicorn as detached mode
      shell: " source /home/{{app_user}}/.rvm/scripts/rvm && unicorn -c {{app_path}}/config/unicorn.rb -E production -D"
      args:
        executable: /bin/bash

    - name: Delete the Default nginx site configurations
      file: path=/etc/nginx/sites-enabled/default
        state=absent

    - name: Configure nginx for production
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-available/{{ app_name }}
      notify: Restart Nginx

    - name: Enable Nginx site
      file:
        src: /etc/nginx/sites-available/{{ app_name }}
        dest: /etc/nginx/sites-enabled/{{ app_name }}
        state: link
      notify: Restart Nginx

  handlers:
    - name: Restart Nginx
      service:
        name: nginx
        state: restarted
